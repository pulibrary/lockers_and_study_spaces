---
version: 2.1
orbs:
  browser-tools: circleci/browser-tools@1.5.2
  node: circleci/node@5.1.0
executors:
  lockers_and_study_spaces-executor:
    docker:
      - image: cimg/ruby:3.4.1-browsers
        environment:
          BUNDLER_VERSION: 2.0.1
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: lockers_and_study_spaces
          RAILS_ENV: test
      - image: postgres:13
        environment:
          POSTGRES_USER: lockers_and_study_spaces
          POSTGRES_DB: lockers_and_study_spaces_test
          POSTGRES_HOST_AUTH_METHOD: trust
    working_directory: ~/project
  basic-executor:
    docker:
      - image: cimg/ruby:3.4.1-browsers
        environment:
          RAILS_ENV: test
    resource_class: large
    working_directory: ~/project

commands:
  setup-bundler:
    description: "Install correct version of bundler and load from cache or bundle install"
    steps:
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - lockers_and_study_spaces-bundle-v3-{{ checksum "Gemfile.lock" }}
            - lockers_and_study_spaces-bundle-v3-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: lockers_and_study_spaces-bundle-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

jobs:
  build:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - checkout
      - setup-bundler
      - node/install:
          install-yarn: true
          node-version: '20.11.1'

      # Only necessary if app uses webpacker or yarn in some other way
      - restore_cache:
          keys:
            - lockers_and_study_spaces-yarn-v1-{{ checksum "yarn.lock" }}

      - run:
          name: Yarn Install
          command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      - save_cache:
          key: lockers_and_study_spaces-yarn-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - persist_to_workspace:
          root: '~/project'
          paths:
            - '*'

  test:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - setup-bundler


      - browser-tools/install-browser-tools
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install

      - run:
          name: install psql
          command: sudo apt install postgresql-client

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: project?
          command: pwd; ls -la config/
      - run:
          name: Database setup
          command: |
            bin/rails db:create
            bin/rails db:schema:load

      # Run rspec with percy
      - run:
          name: Run rspec
          command: |
            bundle exec rspec --tag \~no_ci --profile 10 \
                              --format RspecJunitFormatter \
                              --out test_results/rspec/results.xml \
                              --format progress \
                              $(circleci tests glob "spec/**/*_spec.rb")


      # Save test results for timing analysis
      - store_test_results:
          path: test_results

      - persist_to_workspace:
          root: '~/project'
          paths: 
            - '*'

  eslint:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - run: yarn run lint

  jest:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - run: yarn run test

  rubocop:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - setup-bundler
      - run: bundle exec rubocop

  coverage_report:
    executor: lockers_and_study_spaces-executor
    steps:
      - attach_workspace:
          at: '~/project'
      - run: gem install simplecov
      - run:
          name: Inspect coverage report
          command: |
            RAILS_ENV=test ruby ./scripts/report_coverage.rb
      - store_artifacts:
          path: ~/project/coverage
          destination: coverage

  bearer:
    docker:
      - image: cimg/ruby:3.4
    environment:
      # Set to default branch of your repo
      DEFAULT_BRANCH: main
    steps:
      - checkout
      - run: curl -sfL https://raw.githubusercontent.com/Bearer/bearer/main/contrib/install.sh | sh -s -- -b /tmp
      - run: CURRENT_BRANCH=$CIRCLE_BRANCH SHA=$CIRCLE_SHA1 /tmp/bearer scan .

  semgrep:
    docker:
        - image: returntocorp/semgrep
    steps:
      - checkout
      - run:
          name: Check code against community-provided and custom semgrep rules
          command: semgrep ci --config auto

  deploy:
    executor: basic-executor
    steps:
      - run:
          name: Deploy to Staging
          command: "curl -k \"https://ansible-tower.princeton.edu/api/v2/job_templates/13/launch/\" --header \"Content-Type: application/json\" --header \"Authorization: Bearer $TOWER_TOKEN\" -d '{\"credential_passwords\":{},\"extra_vars\":{\"repo_name\":\"lockers_and_study_spaces\",\"branch_name\":\"main\",\"runtime_env\":\"staging\",\"slack_alerts_channel\":\"ansible-alerts\"}}'"

workflows:
  build_accept:
    jobs:
      - build
      - eslint:
         requires:
          - build
      - jest:
         requires:
          - build
      - rubocop:
         requires:
          - build
      - test:
         requires:
          - build
      - coverage_report:
         requires:
          - test
      - deploy:
         requires:
           - test
         filters:
           branches:
             only:
               - main
      - bearer
      - semgrep
